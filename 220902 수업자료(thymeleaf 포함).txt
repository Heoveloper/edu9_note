ThymeLeaf

0. 기본 특징
	SSR(Server Side Rendering)언어 중 SpringBoot에서 권장하는 언어
	내추럴 템플릿: 기본 html문서를 훼손하지 않고 html속성, 컨텐츠를 동적으로 변경
	th:속성 적용범위(시작태그~종료태그)
			재정의(html 템플릿 문서에서 존재하는 속성은 덮어쓰기, 존재하지 않는 속성은 추가)

1. 변수선언
	th:with = "변수명=표현식"
	
2. 조건문
	case1)
	th:if
	th:unless
	
	case2)
	th:switch, th:case
	
	case3)
	${표현식} ? {true}
	${표현식} ? {true} : {false}
	${표현식} ?: 기본값
	
3. 반복문
	1)요소 반복
	th:each="ele, eleStat : ${collection|array}"
	2)지정횟수 반복
	th:each="count : ${#numbers.sequence(from, to, step)}"
	th:each="count : ${#numbers.sequence(1, 10)}"
	
4. 타임리프 유일한 자체 태그
	용도: html 태그 생성없이 그루핑
	<th:block></th:block>
	
5. url링크
	@{/product/{pid}/{count}(pid="컴퓨터", count="10")}
	=>	/product/컴퓨터/10
	
5-1. url링크를 사용해 동적으로 만든 쿼리스트링
	@{/product/{pid}/{count}(pid="컴퓨터", count="10", price="10000")}
	=>	/product/컴퓨터/10?price="10000"
	@{/product/{pid}/{count}(pid="컴퓨터", count="10", price="10000", desc="조립")}
	=>	/product/컴퓨터/10?price="10000"&desc="조립"
	
6. 객체 멤버 접근
	${person.name}
	${person['name']}	<= 객체 멤버에 동적으로 접근시 사용
	${person.getName()}
	
7. 문자열 템플릿(동적인 문자열을 만들 때 사용)
	|hello ${변수표현식}|
	
8. html의 form태그와 연동하여 편리한 기능을 제공
	-th:object => controller의 form객체 (form객체에 setter메소드가 있어야 한다)
	-th:field => <input>엘리먼트에 id, name, value 속성이 자동 추가
	
	#fields => 검증오류내용을 담고있는 객체
	<div th:if="${#fields.hasGlobalErrors()}">
		<p class="errmsg" th:each="err:${#fields.globalErrors()}" th:text="${err}"></p>
	</div>
	-th:errors => <input>엘리먼트의 값이 오류가 있으면 오류메세지 표시
	-th:errorclass => 오류가 있으면 클래스명 변경(스타일 적용)
	
9. 표현식
${}: 변수 표현식
@{}: URL링크 표현식
#{}: 메세지 표현식
#객체: 내장 객체

*{}: 객체의 변수 표현식
||: 리터럴 치환