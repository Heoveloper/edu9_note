오류검증
1. 위치:
	client: 요청메세지가 만들어지기 전에 js유효성 체크(필터링되면 서버가 반응하기 전에 종료)
	controller: 필수 검증(서버 가장 앞단에서 데이터 필터링)
	db: 제약조건(기본키, unique, not null, 컬럼 타입(varchar2, number..), 컬럼 크기)


2. 체크사항:
	타입 체크
		ex)form객체에 Long으로 지정된(숫자가 입력되어야 하는) 곳에 문자가 입력된 경우 등
		
	데이터 크기
		ex)문자 10자리까지 입력받을 수 있지만 11자리가 입력된 경우 등
		
	비즈니스 규칙 체크 (Field errors)
		ex)비밀번호 정책에 따라 문자, 숫자, 특수문자 혼용필수인데 이를 위반한 경우
		필드 하나에서 발생한 오류(비밀번호 필드에 혼용 안함 등)
		
	Object errors (Global errors)
		ex)필드 여러개를 체크해서 오류를 검증할 수 있는 경우
		여러 필드에서 발생한 오류(비밀번호와 비밀번호 확인의 일치 등)


3. 사용자의 오류확인:
	1.	입력화면 다시 제공(다음 화면으로 진행되지 않게 한다.)
		=>	Controller에서 @ModelAttribute 어노테이션,
			View단에서 th:object 활용
		
	2.	사용자가 입력한 값에 대한 오류메세지 확인
	
	3.	입력값은 사라지지 않고 입력화면에 제공
		=>	Controller에서 @ModelAttribute 어노테이션,
			View단에서 th:object 활용
		
		
4. 오류메세지 구조
	=> 뒤로 갈수록 범위가 넓어진다.
	=> 디테일한 메세지가 우선순위가 높다.

#.
NotBlank.addForm.email		//form객체의 필드값이 존재하면 그 필드의 값(여기선 email필드의 값)
	ex) 회원가입시 이메일 입력은 필수입니다.
NotBlank.email
	ex) 이메일 입력은 필수입니다.
NotBlank.java.lang.String	//오류난 필드타입
	ex) 문자열이어야 합니다.
NotBlank
	ex) 필수 입력 항목입니다.

#.
메소드 파라미터 안의 BindingResult는 form객체 바로 뒤에 따라와야 한다. (앞의 form객체 인식)

#.
레코드1 쿼리1 = queryForObject

#.
ctrl+shift+T = 테스트
		